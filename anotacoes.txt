Como funciona o Redux {
    > Dispara-se uma action , que é um objeto que tem obrigatoriamente a chave type com o seu valor(UNICO), as outras chaves sao os 'valores' da action {
        ex: { type: 'ADD_TO_CART ', product: {id:1,name:'lapis'}}
    }
    > esse objeto é enviado para o redux store
    > dentro do redux store, existem reducers, que é a separação dos estados dentro do redux store
    > os reducers recebem a action e realiza a mutação dentro do estado
    > apos isso, comunica todos os componentes que usam esse estado
    > RESUMO : actions chamam reducers que mutam o estado
}

lidando com cor dentro do JS {
    > $ yarn add polished
}

API fake para dev/testes {
    > $ yarn add json-server -D
    > yarn json-server {nome_do_aquivo.json} -p {numero_porta} -w 
    > no cenario atual ficaria : yarn json-server server.json -p 3333 -w
}

internacionalização / formatando currency {
    > foi criado uma pasta/arquivo em src/util/format.js ( veja o arquivo )
}

implementando redux {
    > $ yarn add redux react-redux
    arquitetura de pasta {
        OBS: nao pode criar um store sem nenhum reducer
        > foi criado uma pasta/arquivo dentro de src chamada store/index.js, e é onde sera feito a configuração inicial do redux ( veja o arquivo )
        > cria-se dentro de store, uma pasta modules
        > cria-se dentro de modules, cria-se o rootReducer.js onde ficarao todos os reducers ( veja o arquivo )
    }
    > importe {Provider} do react-redux, dentro de App.js
    > coloque o 'Provider' em volta de todos os componentes da aplicação
    > passe como parametro o arquivo de configuração que foi criado acima para a tag Provider ( veja o arquivo App.js )
    > IMPORTANTE: para conectar componentes com o redux, é necessario ao exportalos, colocalos dentro de um 'connect' ( veja o arquivo Home/index.js)
    > quando um componente tem o connect, em suas props ele agora tem o 'dispatch', que serve para disparar uma action ao redux ( veja o aruivo Home/index.js/handleAddProduct())
    > quando um dispatch é disparado, TODOS OS REDUCERS SAO CHAMADOS, por isso é necessario colocar um switch dentro dos reducers para 'filtrar' somente oque aquele reducer deve fazer
    ACESSANDO ESTADOS DE OUTROS COMPONENTES {
        > coloque no componente desejado o 'connect'
        > o connect aceita alguns parametros, o primeiro é uma funcao, que recebe um estado e retorna o estado atual do redux {
            >> ( para saber o nome do reducer, basta olhar no root reducer) <<
            ex: export default conenct(state => ({
                    OBJETO_QUE_RECEBE_AS_INFORMAÇÕES: state.NOME_DO_REDUCER_QUE_QUER_O_ESTADO
                }))(NOME_DO_COMPONENTE)
        }
        > pronto, o 'OBJETO_QUE_RECEBE_AS_INFORMAÇÕES' agora esta disponivel nas props
        DICA: o codigo acima é o famoso 'mapStateToProps' {
            exemplo ( é o mesmo codigo acima so que mais organizado ) :

            const mapStateToProps = state => ({
                OBJETO_QUE_RECEBE_AS_INFORMAÇÕES: state.NOME_DO_REDUCER_QUE_QUER_O_ESTADO
            });

            export default conenct(mapStateToProps)(NOME_DO_COMPONENTE)
        }
    }
    > mapDispatchToProps, diferente do mapStateToProps, este converte ACTIONS do redux em props do componente ( veja o arquivo src\pages\Home\index.js) {
        dica: em 'connect', se nao existir mapStateToProps, o primeiro parametro vai como null
        ex: export default connect(null, mapDispatchToProps)(NOME_DO_COMPONENTE);

        >>> AGORA AS ACTIONS ESTAO NAS PROPS
        ex: props.addToCart (veja o arquivo src\pages\Home\index.js)
    }
    
}

debug {
    $ yarn add reactotron-react-js reactotron-redux
    > Cria- uma pasta config, e dentro dela um arquivo ReactotronConfig.js ( veja o arquivo )
    > é necessario nas configuração do redux(src/store/index.js) habilitar createEnhancer() ( veja o arquivo )
    > apos isso, va em App.js e importe as configurações do reactotron ( de preferencia que seja umas das primeira importações )
    > uma coisa legal do reactotron e que pode-se 'subscribe' em um reducer para ficar escutando sempre que ele mudar, outra coisa é salvar o estado atual, ai quando a pagina der refresh, basta de-upar o estado antigo;
}

manipulando estados imutaveis para mutaveis {
    $ yarn add immer
}

middlewares( com redux-saga ) {
    > cria-se um arquivo rootSaga.js,armazena todos os sagas dentro de store/modules ( veja o arquivo )
    > adicione 'createSagaMiddleware' em store/index.js ( veja o arquivo )
    > adiciona rootSaga.js em store/index.js ( veja o arquivo )
    > import applyMiddleware, compose from 'redux' em store/index.js ( veja o arquivo )
    > middleware e um interceptador, mas em vez de interceptar rotas, intercepta actions
    > sera utilizado o redux-saga
    > $ yarn add redux-saga
    > dentro do projeto atual, foi criado um arquivo 'sagas.js' dentro de src/store/modules/cart ( veja o  arquivo )
    DICA >>>>>> {
        > 'function*'(nome desse * é generator) , assemelha-se à 'async function', e agora o await torna-se 'yield'
        > apos usar o yield, caso for uma chamada que seja necessario o 'await', chame em seguida call {
            > import { call } from 'redux-saga/effects';
            ex: const response = yield call(api.get, 'products/${id}')
        }
    } 
    > NOVO FLUXO {
        action chama sagas > sagas processa e chama reducer > reducer faz o processo no state > retorna a resposta
    }
    > Para disparar actions com saga, usa-se o put, "import { put } from 'redux-saga/effects'" {
        ex: 
        const response = yield call(api.get, 'products/${id}')
        yield put(addToCartSuccess(response.data));
    }
    > COMO DISPARAR FUNÇÕES DE DENTRO DO SAGA {
        > serao cadastrados 'listeners' que ficarao ouvindo actions
        > alguns metodos FAMOSOS sao o 'takeLatest' e 'takeEvery' {
            >>>> os 'timers' sao o tempo de request...
            > takeLatest = se clica 4x no botao, o saga leva em consideração so o ultimo click
            > takeEvery = se clica 4x, os 4 click vale
        }
        > import { all, takeLatest, takeEvery } from 'redux-saga/effects';
        > takeLatest(NOME_DA_ACTION_PARA_ESCUTAR, NOME_FUNCAO_PARA_DISPARAR)
        > export default all([
            takeLatest('@cart/ADD_REQUEST', addToCart)

        ])
    }
    > COMO ACESSAR INFORMAÇÕES DO ESTADO DENTRO DO SAGA {
        > import { select } from 'redux-saga/effects' : busca informações dentro do estado
        > select recebe uma funcao que tem o estado como parametro e retorna algo dele
        > ex: 
        yield select ((ESTADO) => {return ESTADO.NOME_DO_REDUCER})
        
        yield select(
            (state) => {return state.cart.find(p => p.id === id)}
        )
    }
}

reactotron-redux-saga {
    > $ yarn add reactotron-redux-saga
    > import no config/ReactotronConfig ( veja o arquivo )
    > adicionar .use(reactotronSaga())
    > ir src/store/index.js e criar a funcao sagaMonitor ( veja o arquivo )
    > depois adicionar a funcao sagaMonitor em createSagaMiddleware
}